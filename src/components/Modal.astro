---
type Props = {
  id: string;
  title?: string;
};

const { id, title } = Astro.props;
---

<dialog id={id} class="modal">
  <header class="modal-header">
    {title && <h5>{title}</h5>}
    <button class="modal-close" aria-label="Close modal"> &times; </button>
  </header>
  <section class="modal-content">
    <slot />
  </section>
</dialog>

<style>
  .modal {
    background-color: var(--gray-999);
    border-radius: 0.5rem;
    box-shadow: var(--shadow-lg);
    max-height: 90vh;
    border: none;
    padding: 0;
    overflow-y: auto;
    margin-inline: auto;
    margin-top: 10vh;
  }

  .modal::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
    animation: fadeIn 0.3s ease forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .modal[open] {
    animation: slideIn 0.3s ease forwards;
  }

  @keyframes slideIn {
    from {
      transform: translateY(-20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid var(--gray-800);
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--gray-300);
    transition: color 0.2s ease;
    border-radius: 4px;

    &:hover {
      color: var(--red-200);
      background-color: var(--gray-800);
    }
  }

  .modal-content {
    padding: 1rem;
  }

  @media (max-width: 20em) {
    .modal {
      max-width: 90vw;
    }
  }
</style>

<script>
  // Initialize modals
  const initModals = () => {
    // Get all modal elements
    const modals = document.querySelectorAll("dialog.modal");

    // Set up open triggers
    document.querySelectorAll("[data-modal-open]").forEach((trigger) => {
      trigger.addEventListener("click", () => {
        const modalId = trigger.getAttribute("data-modal-open");
        if (modalId) {
          const modal = document.getElementById(modalId);
          if (modal && modal instanceof HTMLDialogElement) {
            modal.showModal();
          }
        }
      });
    });

    // Set up close buttons
    modals.forEach((modal) => {
      const closeBtn = modal.querySelector(".modal-close");
      if (closeBtn) {
        closeBtn.addEventListener("click", () => {
          if (modal instanceof HTMLDialogElement) {
            closeModal(modal);
          }
        });
      }

      // Close on click outside of modal content (backdrop click)
      modal.addEventListener("click", ((e: MouseEvent) => {
        const dialogDimensions = modal.getBoundingClientRect();
        if (
          e.clientX < dialogDimensions.left ||
          e.clientX > dialogDimensions.right ||
          e.clientY < dialogDimensions.top ||
          e.clientY > dialogDimensions.bottom
        ) {
          if (modal instanceof HTMLDialogElement) {
            closeModal(modal);
          }
        }
      }) as EventListener);
    });

    // Close on escape key is handled natively by dialog
  };

  // Open modal function for programmatic access
  const openModal = (modalId: string) => {
    const modal = document.getElementById(modalId);
    if (modal && modal instanceof HTMLDialogElement) {
      modal.showModal();
    }
  };

  // Close modal function with animation
  const closeModal = (modal: HTMLDialogElement) => {
    // Add closing animation
    modal.classList.add("closing");
    setTimeout(() => {
      modal.classList.remove("closing");
      modal.close();
    }, 300);
  };

  // Expose functions to global scope for direct calling
  if (typeof window !== "undefined") {
    (window as any).openModal = openModal;
    (window as any).closeModal = (modalId: string) => {
      const modal = document.getElementById(modalId);
      if (modal && modal instanceof HTMLDialogElement) {
        closeModal(modal);
      }
    };
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", initModals);
  // Also initialize on Astro page changes
  document.addEventListener("astro:page-load", initModals);
</script>
